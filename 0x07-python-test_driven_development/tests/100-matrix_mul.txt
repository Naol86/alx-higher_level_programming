The ``100-matrix_mul`` module
==========================

Using ``matrix_mul``
--------------------

Importing the function:
	 >>> matrix_mul = __import__("100-matrix_mul").matrix_mul

Checking for module docstring:
	 >>> m = __import__("100-matrix_mul").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("100-matrix_mul").matrix_mul.__doc__
	 >>> len(f) > 1
	 True

Checking for no args:
	 >>> matrix_mul()
	 Traceback (most recent call last):
	 ...
	 TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Checking for one too few args:
	 >>> matrix_mul([[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Checking for too many args:
	 >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]])
	 Traceback (most recent call last):
	 ...
	 TypeError: matrix_mul() takes 2 positional arguments but 3 were given

Checking with m_a int and m_b list of lists:
	 >>> matrix_mul(12, [[1, 3], [4, 5]])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_a must be a list

Checking with m_a list of lists and m_b string:
	 >>> matrix_mul([[1, 2], [3, 4]], "naol")
	 Traceback (most recent call last):
	 ...
	 TypeError: m_b must be a list

Checking with m_a empty list and m_b list of lists:
	 >>> matrix_mul([], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 ValueError: m_a can't be empty

Checking with m_a list of lists and m_b empty list:
	 >>> matrix_mul([[1, 2], [3, 4]],[[]])
	 Traceback (most recent call last):
	 ...
	 ValueError: m_b can't be empty

Checking with m_a None and m_b list:
	 >>> matrix_mul(None, [1, 2])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_a must be a list

Checking with m_b None:
	 >>> matrix_mul([[1,2]],None)
	 Traceback (most recent call last):
	 ...
	 TypeError: m_b must be a list

Checking with m_a list of lists and m_b None:
	 >>> matrix_mul([[1, 2], [3, 4], [5, 6]], None)
	 Traceback (most recent call last):
	 ...
	 TypeError: m_b must be a list

Checking with m_a list and m_b list:
	 >>> matrix_mul([1, 2], [4, 5])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_a must be a list of lists

Checking with m_a list of lists with string and m_b with list of lists of int:
	 >>> matrix_mul([["a", "b"], ["c", "d"]],[[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_a should contain only integers or floats

Checking with m_b with list of lists of string:
	 >>> matrix_mul([[1, 2], [3, 4]], [["a", "b"], ["c", "d"]])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_b should contain only integers or floats

Checking with m_a list of lists contain int and m_b list of lists contain string:
	 >>> matrix_mul([[1, 2], [3, 4]],[["naol","kainet"]])
	 Traceback (most recent call last):
	 ...
	 TypeError: m_b should contain only integers or floats

Checking with m_a list of lists which is different in row len and m_b valid list of lists:
	 >>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 TypeError: each row of m_a must be of the same size

Checking with valid m_a list of lists and m_b different row size:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
	 Traceback (most recent call last):
	 ...
	 TypeError: each row of m_b must be of the same size

Checking for mismatching matrices:
	 >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4,]])
	 Traceback (most recent call last):
	 ...
	 ValueError: m_a and m_b can't be multiplied

Checking with m_a list of lists and m_b list of lists:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	 [[7, 10], [15, 22]]

Checking with m_a list of lists and m_b list of lists:
	 >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	 [[13, 16]]

Checking for normal use with ints and floats:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]])
	 [[10.5, 15.5, 18.5], [22.5, 33.5, 40.5]]
